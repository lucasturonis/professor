import os
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, simpledialog
from datetime import datetime
import sqlite3
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.platypus import Table, TableStyle
from reportlab.lib import colors
import re

class SistemaSecretaria:
    def __init__(self):
        self.conn = sqlite3.connect('secretaria.db')
        self.criar_tabelas()

    def criar_tabelas(self):
        cursor = self.conn.cursor()
        # Tabela de Alunos
        cursor.execute('''CREATE TABLE IF NOT EXISTS alunos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT NOT NULL,
                        data_nascimento TEXT,
                        responsavel TEXT,
                        telefone TEXT,
                        turma TEXT)''')
        
        # Tabela de Notas
        cursor.execute('''CREATE TABLE IF NOT EXISTS notas (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        aluno_id INTEGER,
                        disciplina TEXT,
                        bimestre INTEGER,
                        nota REAL,
                        FOREIGN KEY(aluno_id) REFERENCES alunos(id))''')
         
        # Tabela de Frequência
        cursor.execute('''CREATE TABLE IF NOT EXISTS frequencia (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        aluno_id INTEGER,
                        data TEXT,
                        presenca BOOLEAN,
                        FOREIGN KEY(aluno_id) REFERENCES alunos(id))''')
        self.conn.commit()

    # Métodos para Alunos
    def cadastrar_aluno(self, nome, data_nascimento, responsavel, telefone, turma):
        cursor = self.conn.cursor()
        cursor.execute('''INSERT INTO alunos (nome, data_nascimento, responsavel, telefone, turma)
                          VALUES (?, ?, ?, ?, ?)''', (nome, data_nascimento, responsavel, telefone, turma))
        self.conn.commit()
        return "Aluno cadastrado com sucesso!"

    def listar_alunos(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM alunos")
        return cursor.fetchall()

    # Métodos para Notas
    def registrar_nota(self, aluno_id, disciplina, bimestre, nota):
        cursor = self.conn.cursor()
        cursor.execute('''INSERT INTO notas (aluno_id, disciplina, bimestre, nota)
                          VALUES (?, ?, ?, ?)''', (aluno_id, disciplina, bimestre, nota))
        self.conn.commit()
        return "Nota registrada com sucesso!"

    def listar_notas(self, aluno_id):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM notas WHERE aluno_id = ?", (aluno_id,))
        return cursor.fetchall()

    # Métodos para Frequência
    def registrar_frequencia(self, aluno_id, data, presenca):
        cursor = self.conn.cursor()
        cursor.execute('''INSERT INTO frequencia (aluno_id, data, presenca)
                          VALUES (?, ?, ?)''', (aluno_id, data, presenca))
        self.conn.commit()
        return "Frequência registrada com sucesso!"

    def listar_frequencia(self, aluno_id):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM frequencia WHERE aluno_id = ?", (aluno_id,))
        return cursor.fetchall()

class InterfaceGrafica:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de Gestão Escolar")
        self.root.geometry("1200x800")
        
        self.secretaria = SistemaSecretaria()
        self.criar_chat_interface()
        self.criar_abas()
    
    def criar_chat_interface(self):
        self.chat_frame = tk.Frame(self.root)
        self.chat_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        
        self.chat_text = scrolledtext.ScrolledText(self.chat_frame, wrap=tk.WORD, state='disabled')
        self.chat_text.pack(fill=tk.BOTH, expand=True)
        self.chat_text.tag_configure("assistente", foreground="blue")
        self.chat_text.tag_configure("voce", foreground="green")
        
        self.input_frame = tk.Frame(self.root)
        self.input_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.input_entry = tk.Entry(self.input_frame, width=100)
        self.input_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.input_entry.bind("<Return>", self.processar_comando)
        
        self.send_button = tk.Button(self.input_frame, text="Enviar", command=self.processar_comando)
        self.send_button.pack(side=tk.RIGHT)
        
        self.enviar_mensagem("Olá! Como posso ajudar você hoje?", assistente=True)
    
    def enviar_mensagem(self, mensagem, assistente=False):
        self.chat_text.config(state='normal')
        if assistente:
            self.chat_text.insert(tk.END, "Assistente: ", "assistente")
        else:
            self.chat_text.insert(tk.END, "Você: ", "voce")
        self.chat_text.insert(tk.END, mensagem + "\n")
        self.chat_text.config(state='disabled')
        self.chat_text.yview(tk.END)
    
    def processar_comando(self, event=None):
        comando = self.input_entry.get().strip()
        if not comando:
            return
        
        self.enviar_mensagem(comando)
        resposta = self.interpretar_comando(comando)
        self.enviar_mensagem(resposta, assistente=True)
        self.input_entry.delete(0, tk.END)
    
    def interpretar_comando(self, comando):
        if re.match(r"cadastrar aluno\s+(.*)", comando, re.IGNORECASE):
            detalhes = comando.split("cadastrar aluno ")[1].strip()
            partes = detalhes.split(",")
            if len(partes) != 5:
                return "Por favor, forneça todos os detalhes do aluno (nome, data_nascimento, responsavel, telefone, turma)."
            nome, data_nascimento, responsavel, telefone, turma = partes
            resultado = self.secretaria.cadastrar_aluno(nome.strip(), data_nascimento.strip(), responsavel.strip(), telefone.strip(), turma.strip())
            return f"{resultado} Gostaria de cadastrar outro aluno?"
        
        elif re.match(r"registrar nota\s+(.*)", comando, re.IGNORECASE):
            detalhes = comando.split("registrar nota ")[1].strip()
            partes = detalhes.split(",")
            if len(partes) != 4:
                return "Por favor, forneça todos os detalhes da nota (aluno_id, disciplina, bimestre, nota)."
            aluno_id, disciplina, bimestre, nota = partes
            try:
                resultado = self.secretaria.registrar_nota(int(aluno_id.strip()), disciplina.strip(), int(bimestre.strip()), float(nota.strip()))
                return f"{resultado} Gostaria de registrar outra nota?"
            except ValueError:
                return "Dados inválidos!"
        
        elif re.match(r"registrar frequencia\s+(.*)", comando, re.IGNORECASE):
            detalhes = comando.split("registrar frequencia ")[1].strip()
            partes = detalhes.split(",")
            if len(partes) != 3:
                return "Por favor, forneça todos os detalhes da frequência (aluno_id, data, presenca)."
            aluno_id, data, presenca = partes
            try:
                presenca_bool = presenca.strip().lower() in ['sim', 'presente', '1']
                resultado = self.secretaria.registrar_frequencia(int(aluno_id.strip()), data.strip(), presenca_bool)
                return f"{resultado} Gostaria de registrar outra frequência?"
            except ValueError:
                return "Dados inválidos!"
        
        elif re.match(r"listar alunos", comando, re.IGNORECASE):
            alunos = self.secretaria.listar_alunos()
            texto = "ID | Nome | Turma\n" + "-"*50 + "\n"
            for aluno in alunos:
                texto += f"{aluno[0]} | {aluno[1]} | {aluno[5]}\n"
            return texto
        
        elif re.match(r"listar notas\s+(\d+)", comando, re.IGNORECASE):
            aluno_id = int(comando.split("listar notas ")[1].strip())
            notas = self.secretaria.listar_notas(aluno_id)
            texto = "Disciplina | Bimestre | Nota\n" + "-"*50 + "\n"
            for nota in notas:
                texto += f"{nota[2]} | {nota[3]} | {nota[4]}\n"
            return texto
        
        elif re.match(r"listar frequencia\s+(\d+)", comando, re.IGNORECASE):
            aluno_id = int(comando.split("listar frequencia ")[1].strip())
            frequencias = self.secretaria.listar_frequencia(aluno_id)
            texto = "Data | Presença\n" + "-"*50 + "\n"
            for freq in frequencias:
                status = "Presente" if freq[3] else "Faltou"
                texto += f"{freq[2]} | {status}\n"
            return texto
        
        elif re.match(r"gerar relatorio\s+(\d+)", comando, re.IGNORECASE):
            aluno_id = int(comando.split("gerar relatorio ")[1].strip())
            self.gerar_relatorio_aluno(aluno_id)
            return f"Relatório do aluno {aluno_id} gerado com sucesso!"
        
        else:
            return "Comando não reconhecido. Tente novamente."

    def criar_abas(self):
        self.abas = ttk.Notebook(self.root)
        
        # Aba Cadastro de Alunos
        self.criar_aba_cadastro()
        
        # Aba Registro de Notas
        self.criar_aba_notas()
        
        # Aba Registro de Frequência
        self.criar_aba_frequencia()
        
        # Aba Listagens
        self.criar_aba_listagens()
        
        self.abas.pack(expand=1, fill="both")

    # ABA CADASTRO DE ALUNOS
    def criar_aba_cadastro(self):
        frame = ttk.Frame(self.abas)
        self.abas.add(frame, text="Cadastro de Alunos")
        
        campos = [
            ("Nome:", 0),
            ("Data Nasc. (AAAA-MM-DD):", 1),
            ("Responsável:", 2),
            ("Telefone:", 3),
            ("Turma:", 4)
        ]
        
        self.entries_cadastro = []
        for label, row in campos:
            tk.Label(frame, text=label).grid(row=row, column=0, padx=10, pady=5, sticky="e")
            entry = tk.Entry(frame, width=40)
            entry.grid(row=row, column=1, padx=10, pady=5)
            self.entries_cadastro.append(entry)
        
        tk.Button(frame, text="Salvar", command=self.salvar_aluno).grid(row=5, column=1, pady=10)

    def salvar_aluno(self):
        dados = [entry.get() for entry in self.entries_cadastro]
        if all(dados):
            self.secretaria.cadastrar_aluno(*dados)
            messagebox.showinfo("Sucesso", "Aluno cadastrado!")
            for entry in self.entries_cadastro:
                entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Erro", "Preencha todos os campos!")

    # ABA REGISTRO DE NOTAS
    def criar_aba_notas(self):
        frame = ttk.Frame(self.abas)
        self.abas.add(frame, text="Registro de Notas")
        
        tk.Label(frame, text="Aluno:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.combo_aluno_notas = ttk.Combobox(frame, width=37)
        self.combo_aluno_notas.grid(row=0, column=1, padx=10, pady=5)
        
        tk.Label(frame, text="Disciplina:").grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.entry_disciplina = tk.Entry(frame, width=40)
        self.entry_disciplina.grid(row=1, column=1, padx=10, pady=5)
        
        tk.Label(frame, text="Bimestre:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
        self.entry_bimestre = tk.Entry(frame, width=40)
        self.entry_bimestre.grid(row=2, column=1, padx=10, pady=5)
        
        tk.Label(frame, text="Nota:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
        self.entry_nota = tk.Entry(frame, width=40)
        self.entry_nota.grid(row=3, column=1, padx=10, pady=5)
        
        tk.Button(frame, text="Registrar Nota", command=self.registrar_nota).grid(row=4, column=1, pady=10)
        self.atualizar_combo_alunos()

    def atualizar_combo_alunos(self):
        alunos = self.secretaria.listar_alunos()
        self.combo_aluno_notas['values'] = [f"{aluno[0]} - {aluno[1]}" for aluno in alunos]

    def registrar_nota(self):
        aluno_id = self.combo_aluno_notas.get().split(" - ")[0]
        disciplina = self.entry_disciplina.get()
        bimestre = self.entry_bimestre.get()
        nota = self.entry_nota.get()
        
        if aluno_id and disciplina and bimestre and nota:
            try:
                self.secretaria.registrar_nota(aluno_id, disciplina, int(bimestre), float(nota))
                messagebox.showinfo("Sucesso", "Nota registrada!")
                self.entry_disciplina.delete(0, tk.END)
                self.entry_bimestre.delete(0, tk.END)
                self.entry_nota.delete(0, tk.END)
            except ValueError:
                messagebox.showerror("Erro", "Dados inválidos!")
        else:
            messagebox.showwarning("Erro", "Preencha todos os campos!")

    # ABA REGISTRO DE FREQUÊNCIA
    def criar_aba_frequencia(self):
        frame = ttk.Frame(self.abas)
        self.abas.add(frame, text="Registro de Frequência")
        
        tk.Label(frame, text="Aluno:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.combo_aluno_frequencia = ttk.Combobox(frame, width=37)
        self.combo_aluno_frequencia.grid(row=0, column=1, padx=10, pady=5)
        
        tk.Label(frame, text="Data (AAAA-MM-DD):").grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.entry_data = tk.Entry(frame, width=40)
        self.entry_data.grid(row=1, column=1, padx=10, pady=5)
        
        tk.Label(frame, text="Presente:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
        self.var_presenca = tk.BooleanVar()
        tk.Checkbutton(frame, variable=self.var_presenca).grid(row=2, column=1, padx=10, pady=5, sticky="w")
        
        tk.Button(frame, text="Registrar Frequência", command=self.registrar_frequencia).grid(row=3, column=1, pady=10)
        self.atualizar_combo_alunos_frequencia()

    def atualizar_combo_alunos_frequencia(self):
        alunos = self.secretaria.listar_alunos()
        self.combo_aluno_frequencia['values'] = [f"{aluno[0]} - {aluno[1]}" for aluno in alunos]

    def registrar_frequencia(self):
        aluno_id = self.combo_aluno_frequencia.get().split(" - ")[0]
        data = self.entry_data.get()
        presenca = self.var_presenca.get()
        
        if aluno_id and data:
            self.secretaria.registrar_frequencia(aluno_id, data, presenca)
            messagebox.showinfo("Sucesso", "Frequência registrada!")
            self.entry_data.delete(0, tk.END)
            self.var_presenca.set(False)
        else:
            messagebox.showwarning("Erro", "Preencha todos os campos!")

    # ABA LISTAGENS
    def criar_aba_listagens(self):
        frame = ttk.Frame(self.abas)
        self.abas.add(frame, text="Listagens")
        
        self.notebook_listagens = ttk.Notebook(frame)
        
        # Sub-aba Lista de Alunos
        frame_alunos = ttk.Frame(self.notebook_listagens)
        self.texto_alunos = scrolledtext.ScrolledText(frame_alunos, width=100, height=20)
        self.texto_alunos.pack(padx=10, pady=10)
        tk.Button(frame_alunos, text="Atualizar", command=self.atualizar_lista_alunos).pack()
        self.notebook_listagens.add(frame_alunos, text="Alunos")
         
        # Sub-aba Histórico de Notas
        frame_notas = ttk.Frame(self.notebook_listagens)
        self.texto_notas = scrolledtext.ScrolledText(frame_notas, width=100, height=20)
        self.texto_notas.pack(padx=10, pady=10)
        tk.Button(frame_notas, text="Selecionar Aluno", command=self.selecionar_aluno_notas).pack()
        self.notebook_listagens.add(frame_notas, text="Notas")
        
        # Sub-aba Histórico de Frequência
        frame_frequencia = ttk.Frame(self.notebook_listagens)
        self.texto_frequencia = scrolledtext.ScrolledText(frame_frequencia, width=100, height=20)
        self.texto_frequencia.pack(padx=10, pady=10)
        tk.Button(frame_frequencia, text="Selecionar Aluno", command=self.selecionar_aluno_frequencia).pack()
        self.notebook_listagens.add(frame_frequencia, text="Frequência")
        
        self.notebook_listagens.pack(expand=1, fill="both")

    def atualizar_lista_alunos(self):
        self.texto_alunos.delete(1.0, tk.END)
        alunos = self.secretaria.listar_alunos()
        texto = "ID | Nome | Turma\n" + "-"*50 + "\n"
        for aluno in alunos:
            texto += f"{aluno[0]} | {aluno[1]} | {aluno[5]}\n"
        self.texto_alunos.insert(tk.END, texto)

    def selecionar_aluno_notas(self):
        aluno_id = simpledialog.askinteger("Selecionar Aluno", "Digite o ID do aluno:")
        if aluno_id:
            self.texto_notas.delete(1.0, tk.END) 
            notas = self.secretaria.listar_notas(aluno_id)
            texto = "Disciplina | Bimestre | Nota\n" + "-"*50 + "\n"
            for nota in notas:
                texto += f"{nota[2]} | {nota[3]} | {nota[4]}\n"
            self.texto_notas.insert(tk.END, texto)

    def selecionar_aluno_frequencia(self):
        aluno_id = simpledialog.askinteger("Selecionar Aluno", "Digite o ID do aluno:")
        if aluno_id:
            self.texto_frequencia.delete(1.0, tk.END)
            frequencias = self.secretaria.listar_frequencia(aluno_id)
            texto = "Data | Presença\n" + "-"*50 + "\n"
            for freq in frequencias:
                status = "Presente" if freq[3] else "Faltou"
                texto += f"{freq[2]} | {status}\n"
            self.texto_frequencia.insert(tk.END, texto)

    # GERADOR DE RELATÓRIOS PDF
    def gerar_relatorio_aluno(self, aluno_id):
        try:
            # Criar PDF
            filename = f"relatorio_aluno_{aluno_id}.pdf"
            c = canvas.Canvas(filename, pagesize=letter)
            width, height = letter
            
            # Cabeçalho
            c.setFont("Helvetica-Bold", 14)
            c.drawString(100, height - 100, f"Relatório do Aluno ID: {aluno_id}")
            
            # Dados do Aluno
            cursor = self.secretaria.conn.cursor()
            cursor.execute("SELECT * FROM alunos WHERE id = ?", (aluno_id,))
            aluno = cursor.fetchone()
            
            c.setFont("Helvetica", 12)
            y = height - 150
            c.drawString(100, y, f"Nome: {aluno[1]}")
            y -= 20
            c.drawString(100, y, f"Turma: {aluno[5]}")
            y -= 40
            
            # Tabela de Notas
            notas = self.secretaria.listar_notas(aluno_id)
            dados_notas = [["Disciplina", "Bimestre", "Nota"]]
            for nota in notas:
                dados_notas.append([nota[2], str(nota[3]), str(nota[4])])
            
            tabela_notas = Table(dados_notas, colWidths=[200, 80, 80])
            tabela_notas.setStyle(TableStyle([
                ('BACKGROUND', (0,0), (-1,0), colors.grey),
                ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
                ('ALIGN', (0,0), (-1,-1), 'CENTER'),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0,0), (-1,0), 12),
                ('BACKGROUND', (0,1), (-1,-1), colors.beige),
                ('GRID', (0,0), (-1,-1), 1, colors.black)
            ]))
            tabela_notas.wrapOn(c, width, height)
            tabela_notas.drawOn(c, 100, y - 20 - tabela_notas.height)
            
            c.save()
            messagebox.showinfo("Sucesso", f"Relatório gerado: {filename}")
        except Exception as e:
            messagebox.showerror("Erro", f"Não foi possível gerar o relatório: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = InterfaceGrafica(root)
    root.mainloop()
